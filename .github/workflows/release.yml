on:
  push:
    branches:
      - release/integrationnet
      - release/mainnet

name: Release

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Release
    outputs:
      release_tag: ${{ steps.create_tag.outputs.release_tag }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if the commit already has a tag starting with "v"
        id: check_tag
        run: |
          TAG=$(git tag --contains HEAD | grep -E '^v' || true)
          if [ -n "$TAG" ]; then
            echo "This commit has a tag starting with 'v': $TAG"
            echo "TAG_EXISTS=true" >> "$GITHUB_ENV"
          else
            echo "This commit does not have a tag starting with 'v'."
            echo "TAG_EXISTS=false" >> "$GITHUB_ENV"
          fi

      - name: Check branch and abort if necessary
        if: env.TAG_EXISTS == 'true' && github.ref_name == 'release/integrationnet'
        run: |
          echo "Aborting the action because the release should already exist."
          exit 1

      - name: Setup Java and scala
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          JAVA_VERSION: 11
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: "./.github/templates/actions/setup_java_and_scala"

      - name: Test
        run: sbt 'scalafixAll --check --rules OrganizeImports;scalafmtCheckAll;test'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the release version
        id: get_version
        run: |
          {
            if [[ "${{ github.ref_name }}" == "release/mainnet" ]]; then
              echo 'VERSION<<EOF'
              npx commit-and-tag-version --dry-run | grep -oP 'tagging release v\K[0-9]+\.[0-9]+\.[0-9]+'
              echo EOF
            elif [[ "${{ github.ref_name }}" == "release/integrationnet" ]]; then
              echo 'VERSION<<EOF'
              npx commit-and-tag-version --dry-run --prerelease rc | grep -oP 'tagging release v\K(.*)'
              echo EOF
            fi
          } >> "$GITHUB_OUTPUT"

      - name: Build Changelog
        id: get_changelog
        run: |
          {
            echo "CHANGELOG<<EOF"
            npx commit-and-tag-version --dry-run | sed -n '/---/,/---/p' | sed '1d;$d'
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Create release tag
        id: create_tag
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          echo "Release-As: $VERSION" >> $GITHUB_STEP_SUMMARY
          git tag -a v$VERSION -m "Release $VERSION"
          git push origin v$VERSION -f
          echo "release_tag=v$VERSION" >> "$GITHUB_OUTPUT"
          echo "Debug: Setting release_tag output to v$VERSION"

      - name: Assembly ðŸš€
        run: sbt 'currencyL0/assembly;currencyL1/assembly;dataL1/assembly'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: v${{ steps.get_version.outputs.VERSION }}

      - name: Copy dependencies
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          cp ./modules/l0/target/scala-2.13/amm_metagraph-currency-l0-assembly-$VERSION.jar ./metagraph-l0.jar
          cp ./modules/l1/target/scala-2.13/amm_metagraph-currency-l1-assembly-$VERSION.jar ./currency-l1.jar
          cp ./modules/data_l1/target/scala-2.13/amm_metagraph-data_l1-assembly-$VERSION.jar ./data-l1.jar

      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-files
          path: |
            ./metagraph-l0.jar
            ./currency-l1.jar
            ./data-l1.jar

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false
          body: ${{ steps.get_changelog.outputs.CHANGELOG }}
          files: |
            ./metagraph-l0.jar
            ./currency-l1.jar
            ./data-l1.jar

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Clone service to build image
        run: |
          git clone https://github.com/Constellation-Labs/validator-node-docker.git

      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-files
          path: ./jar-files

      - name: Move JARs to service
        run: |
          mkdir -p validator-node-docker/jars
          mv jar-files/metagraph-l0.jar validator-node-docker/jars/metagraph-l0.jar
          mv jar-files/currency-l1.jar validator-node-docker/jars/currency-l1.jar
          mv jar-files/data-l1.jar validator-node-docker/jars/data-l1.jar

      - name: Extract version from tag
        id: get_docker_version
        run: |
          VERSION="${{ needs.build.outputs.release_tag }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

          # Set environment based on branch
          if [[ "${{ github.ref_name }}" == "release/mainnet" ]]; then
            echo "ENVIRONMENT=mainnet" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_name }}" == "release/integrationnet" ]]; then
            echo "ENVIRONMENT=integrationnet" >> "$GITHUB_OUTPUT"
          else
            echo "ENVIRONMENT=unknown" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./validator-node-docker
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pacaswap-node-operator-${{ steps.get_docker_version.outputs.ENVIRONMENT }}:${{ steps.get_docker_version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pacaswap-node-operator-${{ steps.get_docker_version.outputs.ENVIRONMENT }}:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-integrationnet:
    if: github.ref_name == 'release/integrationnet'
    name: Deploy integrationnet source nodes
    runs-on: ubuntu-latest
    needs: [docker,build]
    environment: INTEGRATIONNET
    steps:
      - uses: actions/checkout@v4

      - name: Deploy Integrationnet
        uses: "./.github/templates/actions/deploy"
        with:
          SSH_NODE_1_HOST: ${{ secrets.SSH_NODE_1_HOST }}
          SSH_NODE_1_USER: ${{ secrets.SSH_NODE_1_USER }}
          SSH_NODE_2_HOST: ${{ secrets.SSH_NODE_2_HOST }}
          SSH_NODE_2_USER: ${{ secrets.SSH_NODE_2_USER }}
          SSH_NODE_3_HOST: ${{ secrets.SSH_NODE_3_HOST }}
          SSH_NODE_3_USER: ${{ secrets.SSH_NODE_3_USER }}

          SSH_HOST_MONITORING: ${{ secrets.SSH_HOST_MONITORING }}
          SSH_USER_MONITORING: ${{ secrets.SSH_USER_MONITORING }}
          MONITORING_PROJECT_DIRECTORY: ${{ secrets.MONITORING_PROJECT_DIRECTORY }}

          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOYED_VERSION: ${{ needs.build.outputs.release_tag }}

  deploy-mainnet:
    if: github.ref_name == 'release/mainnet'
    name: Deploy mainnet source nodes
    runs-on: ubuntu-latest
    needs: [ docker,build ]
    environment: MAINNET
    steps:
      - uses: actions/checkout@v4

      - name: Deploy Mainnet
        uses: "./.github/templates/actions/deploy"
        with:
          SSH_NODE_1_HOST: ${{ secrets.SSH_NODE_1_HOST }}
          SSH_NODE_1_USER: ${{ secrets.SSH_NODE_1_USER }}
          SSH_NODE_2_HOST: ${{ secrets.SSH_NODE_2_HOST }}
          SSH_NODE_2_USER: ${{ secrets.SSH_NODE_2_USER }}
          SSH_NODE_3_HOST: ${{ secrets.SSH_NODE_3_HOST }}
          SSH_NODE_3_USER: ${{ secrets.SSH_NODE_3_USER }}

          SSH_HOST_MONITORING: ${{ secrets.SSH_HOST_MONITORING }}
          SSH_USER_MONITORING: ${{ secrets.SSH_USER_MONITORING }}
          MONITORING_PROJECT_DIRECTORY: ${{ secrets.MONITORING_PROJECT_DIRECTORY }}

          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOYED_VERSION: ${{ needs.build.outputs.release_tag }}