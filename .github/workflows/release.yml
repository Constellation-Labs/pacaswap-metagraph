on:
  push:
    branches:
      - release/integrationnet
      - release/mainnet

name: Release

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Release
    outputs:
      release_tag: ${{ steps.create_tag.outputs.release_tag }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if the commit already has a tag starting with "v"
        id: check_tag
        run: |
          TAG=$(git tag --contains HEAD | grep -E '^v' || true)
          if [ -n "$TAG" ]; then
            echo "This commit has a tag starting with 'v': $TAG"
            echo "TAG_EXISTS=true" >> "$GITHUB_ENV"
          else
            echo "This commit does not have a tag starting with 'v'."
            echo "TAG_EXISTS=false" >> "$GITHUB_ENV"
          fi

      - name: Check branch and abort if necessary
        if: env.TAG_EXISTS == 'true' && github.ref_name == 'release/integrationnet'
        run: |
          echo "Aborting the action because the release should already exist."
          exit 1

      - name: Setup Java and scala
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          JAVA_VERSION: 11
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: "./.github/templates/actions/setup_java_and_scala"

      - name: Test
        run: sbt 'scalafixAll --check --rules OrganizeImports;scalafmtCheckAll;test'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the release version
        id: get_version
        run: |
          {
            if [[ "${{ github.ref_name }}" == "release/mainnet" ]]; then
              echo 'VERSION<<EOF'
              npx commit-and-tag-version --dry-run | grep -oP 'tagging release v\K[0-9]+\.[0-9]+\.[0-9]+'
              echo EOF
            elif [[ "${{ github.ref_name }}" == "release/integrationnet" ]]; then
              echo 'VERSION<<EOF'
              npx commit-and-tag-version --dry-run --prerelease rc | grep -oP 'tagging release v\K(.*)'
              echo EOF
            fi
          } >> "$GITHUB_OUTPUT"

      - name: Build Changelog
        id: get_changelog
        run: |
          {
            echo "CHANGELOG<<EOF"
            npx commit-and-tag-version --dry-run | sed -n '/---/,/---/p' | sed '1d;$d'
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Create release tag
        id: create_tag
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          echo "Release-As: $VERSION" >> $GITHUB_STEP_SUMMARY
          git tag -a v$VERSION -m "Release $VERSION"
          git push origin v$VERSION -f
          echo "release_tag=v$VERSION" >> "$GITHUB_OUTPUT"
          echo "Debug: Setting release_tag output to v$VERSION"

      - name: Assembly ðŸš€
        run: sbt 'currencyL0/assembly;currencyL1/assembly;dataL1/assembly'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: v${{ steps.get_version.outputs.VERSION }}

      - name: Copy dependencies
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          cp ./modules/l0/target/scala-2.13/amm_metagraph-currency-l0-assembly-$VERSION.jar ./metagraph-l0.jar
          cp ./modules/l1/target/scala-2.13/amm_metagraph-currency-l1-assembly-$VERSION.jar ./currency-l1.jar
          cp ./modules/data_l1/target/scala-2.13/amm_metagraph-data_l1-assembly-$VERSION.jar ./data-l1.jar

      - name: Cleanup ramdisk
        if: always()
        run: |
          sudo umount ./ramdisk
          rm -rf ./ramdisk 

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false
          body: ${{ steps.get_changelog.outputs.CHANGELOG }}
          files: |
            ./metagraph-l0.jar
            ./currency-l1.jar
            ./data-l1.jar