name: Metagraph - jar build

inputs:
  METAGRAPH_NAME:
    required: true
  TEMPLATE_NAME:
    required: false
  INCLUDE_DATA_LAYER:
    required: true
  GITHUB_TOKEN:
    required: true

runs:
  using: "composite"
  steps:
    - name: Get project hash
      id: project-hash
      shell: bash
      run: |
        if [ -n "${{ inputs.TEMPLATE_NAME }}" ]; then
          HASH=$(git rev-parse HEAD:.github/templates/metagraphs/${{ inputs.TEMPLATE_NAME }})
        else
          MODULES_HASH=$(git rev-parse HEAD:modules)
          PROJECT_HASH=$(git rev-parse HEAD:project)
          BUILD_SBT_HASH=$(git rev-parse HEAD:build.sbt)
          VERSION_HASH=$(git rev-parse HEAD:version.sbt || echo "no-version-sbt")
          HASH=$(echo "$MODULES_HASH $PROJECT_HASH $BUILD_SBT_HASH $VERSION_HASH" | sha1sum | awk '{print $1}')
        fi
        echo "hash=$HASH" >> $GITHUB_OUTPUT

    - name: Create directories - ${{ inputs.METAGRAPH_NAME }}
      shell: bash
      run: |
        cd .github
        mkdir -p code/metagraphs/${{ inputs.METAGRAPH_NAME }}/metagraph-l0/genesis-node
        echo "empty" > code/metagraphs/${{ inputs.METAGRAPH_NAME }}/metagraph-l0/genesis-node/placeholder.txt
        
        mkdir -p code/metagraphs/${{ inputs.METAGRAPH_NAME }}/metagraph-l0/validator-1
        echo "empty" > code/metagraphs/${{ inputs.METAGRAPH_NAME }}/metagraph-l0/validator-1/placeholder.txt
        
        mkdir -p code/metagraphs/${{ inputs.METAGRAPH_NAME }}/metagraph-l0/validator-2
        echo "empty" > code/metagraphs/${{ inputs.METAGRAPH_NAME }}/metagraph-l0/validator-2/placeholder.txt
        
        mkdir -p code/metagraphs/${{ inputs.METAGRAPH_NAME }}/currency-l1/initial-validator
        echo "empty" > code/metagraphs/${{ inputs.METAGRAPH_NAME }}/currency-l1/initial-validator/placeholder.txt
        
        mkdir -p code/metagraphs/${{ inputs.METAGRAPH_NAME }}/currency-l1/validator-1
        echo "empty" > code/metagraphs/${{ inputs.METAGRAPH_NAME }}/currency-l1/validator-1/placeholder.txt
        
        mkdir -p code/metagraphs/${{ inputs.METAGRAPH_NAME }}/currency-l1/validator-2
        echo "empty" > code/metagraphs/${{ inputs.METAGRAPH_NAME }}/currency-l1/validator-2/placeholder.txt

    - name: Create data layer directories if needed
      if: ${{ inputs.INCLUDE_DATA_LAYER == 'true' }}
      shell: bash
      run: |
        cd .github
        mkdir -p code/metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/initial-validator
        echo "empty" > code/metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/initial-validator/placeholder.txt
        
        mkdir -p code/metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/validator-1
        echo "empty" > code/metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/validator-1/placeholder.txt
        
        mkdir -p code/metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/validator-2
        echo "empty" > code/metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/validator-2/placeholder.txt

    # Restore individual JARs from cache
    - name: Restore L0 JAR
      id: cache-metagraph-l0
      uses: actions/cache/restore@v4
      with:
        path: .github/code/metagraphs/${{ inputs.METAGRAPH_NAME }}/metagraph-l0/metagraph-l0.jar
        key: ${{ runner.os }}-${{ inputs.TEMPLATE_NAME || 'amm_template' }}-metagraph-l0-${{ steps.project-hash.outputs.hash }}

    - name: Restore Currency L1 JAR
      id: cache-currency-l1
      uses: actions/cache/restore@v4
      with:
        path: .github/code/metagraphs/${{ inputs.METAGRAPH_NAME }}/currency-l1/currency-l1.jar
        key: ${{ runner.os }}-${{ inputs.TEMPLATE_NAME || 'amm_template' }}-currency-l1-${{ steps.project-hash.outputs.hash }}

    - name: Restore Data L1 JAR
      id: cache-data-l1
      if: ${{ inputs.INCLUDE_DATA_LAYER == 'true' }}
      uses: actions/cache/restore@v4
      with:
        path: .github/code/metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/data-l1.jar
        key: ${{ runner.os }}-${{ inputs.TEMPLATE_NAME || 'amm_template' }}-data-l1-${{ steps.project-hash.outputs.hash }}
    
    - name: Log cache status
      shell: bash
      run: |
        echo "Cache status:"
        echo "- Metagraph L0 JAR: ${{ steps.cache-metagraph-l0.outputs.cache-hit == 'true' && '‚úÖ Restored' || '‚ö†Ô∏è Need to build' }}"
        echo "- Currency L1 JAR: ${{ steps.cache-currency-l1.outputs.cache-hit == 'true' && '‚úÖ Restored' || '‚ö†Ô∏è Need to build' }}"
        if [ "${{ inputs.INCLUDE_DATA_LAYER }}" == "true" ]; then
          echo "- Data L1 JAR: ${{ steps.cache-data-l1.outputs.cache-hit == 'true' && '‚úÖ Restored' || '‚ö†Ô∏è Need to build' }}"
        fi

    - name: Copy genesis to metagraph L0 - ${{ inputs.METAGRAPH_NAME }}
      shell: bash
      run: |  
        cp .github/config/genesis.csv .github/code/metagraphs/${{ inputs.METAGRAPH_NAME }}/metagraph-l0/genesis-node

    - name: Generate metagraph dependencies and hypergraph JARs - Template üî•
      if: ${{ inputs.TEMPLATE_NAME != '' && (steps.cache-metagraph-l0.outputs.cache-hit != 'true' || steps.cache-currency-l1.outputs.cache-hit != 'true') }}
      shell: bash
      run: |
        TESS_VERSION=$(grep -oP 'val tessellation = "\K[0-9.]+(?=")' project/Dependencies.scala)

        cp -r .github/templates/metagraphs/${{ inputs.TEMPLATE_NAME }} .github/code
        cd .github/code/${{ inputs.TEMPLATE_NAME }}
        
        sed -i "s/val tessellation = \"99\.99\.99\"/val tessellation = \"$TESS_VERSION\"/" project/Dependencies.scala
        
        sbt --error clean compile currencyL0/assembly currencyL1/assembly
        
        mv modules/l0/target/scala-2.13/*-assembly-* ../metagraphs/${{inputs.METAGRAPH_NAME}}/metagraph-l0/metagraph-l0.jar
        mv modules/l1/target/scala-2.13/*-assembly-* ../metagraphs/${{inputs.METAGRAPH_NAME}}/currency-l1/currency-l1.jar
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

    - name: Copy data layer JARs if needed - Template
      if: ${{ inputs.TEMPLATE_NAME != '' && inputs.INCLUDE_DATA_LAYER == 'true' && steps.cache-data-l1.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd .github/code/metagraphs/${{inputs.TEMPLATE_NAME}}
        mv modules/data_l1/target/scala-2.13/*-assembly-* ../metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/data-l1.jar

    - name: Generate metagraph dependencies and hypergraph JARs - AMM üî•
      if: ${{ inputs.TEMPLATE_NAME == '' && (steps.cache-metagraph-l0.outputs.cache-hit != 'true' || steps.cache-currency-l1.outputs.cache-hit != 'true') }}
      shell: bash
      run: |
        sbt --error clean compile currencyL0/assembly currencyL1/assembly
        
        mv modules/l0/target/scala-2.13/*-assembly-* .github/code/metagraphs/${{inputs.METAGRAPH_NAME}}/metagraph-l0/metagraph-l0.jar
        mv modules/l1/target/scala-2.13/*-assembly-* .github/code/metagraphs/${{inputs.METAGRAPH_NAME}}/currency-l1/currency-l1.jar
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

    - name: Copy data layer JARs if needed - AMM
      if: ${{ inputs.TEMPLATE_NAME == '' && inputs.INCLUDE_DATA_LAYER == 'true' && steps.cache-data-l1.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        sbt --error clean compile dataL1/assembly
        mv modules/data_l1/target/scala-2.13/*-assembly-* .github/code/metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/data-l1.jar
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

    - name: Save Metagraph L0 JAR
      if: ${{ steps.cache-metagraph-l0.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: .github/code/metagraphs/${{ inputs.METAGRAPH_NAME }}/metagraph-l0/metagraph-l0.jar
        key: ${{ runner.os }}-${{ inputs.TEMPLATE_NAME || 'amm_template' }}-metagraph-l0-${{ steps.project-hash.outputs.hash }}

    - name: Save Currency L1 JAR
      if: ${{ steps.cache-currency-l1.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: .github/code/metagraphs/${{ inputs.METAGRAPH_NAME }}/currency-l1/currency-l1.jar
        key: ${{ runner.os }}-${{ inputs.TEMPLATE_NAME || 'amm_template' }}-currency-l1-${{ steps.project-hash.outputs.hash }}

    - name: Save Data L1 JAR
      if: ${{ inputs.INCLUDE_DATA_LAYER == 'true' && steps.cache-data-l1.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: .github/code/metagraphs/${{ inputs.METAGRAPH_NAME }}/data-l1/data-l1.jar
        key: ${{ runner.os }}-${{ inputs.TEMPLATE_NAME || 'amm_template' }}-data-l1-${{ steps.project-hash.outputs.hash }}

    - name: Cleaning directory
      if: ${{ inputs.TEMPLATE_NAME != '' }}
      shell: bash
      run: |
        rm -rf .github/code/metagraphs/${{inputs.TEMPLATE_NAME}}